package entra21.validacao;

import javax.swing.JOptionPane;

public class ValidacaoCampos {
	// Variaveis de acesso da Classe
	String nome = "", cpf = "";
	int idade = 0, funcao = 0;
	double salario = 0;
	char sexo = 0;
	
	// Metodo para validar Nomes
	public String validaNomePessoa() {
		// Atribui condicao de validacao
		boolean valida = false;
		
		// Caso condicao corresponder
		while (!valida) {
			try {
				// Usuario informa valor
				nome = JOptionPane.showInputDialog(null, "Nome Completo:");
				
				// Caso registro vazio, exibe mensagem e repete
				if (nome.isEmpty()) {
					JOptionPane.showMessageDialog(null, "Entre um Nome abaixo:");
				} else {
					// Caso contrário, apaga numeros contidos e valida
					nome = nome.replace("[0-9]", "");
					valida = true;
				}
			} catch (Exception ex) {
				// Exibe mensagem para usuario e erro para desenvolvedor
				System.out.println(ex.getMessage());
				JOptionPane.showMessageDialog(null, "Por favor, preencha com Nome");
			}
		}
		// Retorna valord e entrada
		return nome;
	}
	
	// Validacao de Idade ou numeros inteiros
	public int validaIdade() {
		// Define condicao
		boolean valida = false;
		
		// Enquanto condicao nao corresponder
		while (!valida) {
			try {
				// Captura entrada de Usuario
				idade = Integer.parseInt(
					JOptionPane.showInputDialog(null, "Entre uma Idade:"));
				
				// Caso idade for diferente
				if (idade <= 0 || idade > 130) {
					JOptionPane.showMessageDialog(null, "Entre uma idade corretamente");
				} else {
					// Valida condicao
					valida = true;
				}
			} catch (Exception ex) {
				// Exibe mensagem para Usuario e erro para Desenvolvedor
				System.out.println(ex.getMessage());
				JOptionPane.showMessageDialog(null, "Por favor, preencha com uma idade");
			}
		}
		// Retorna variavel da funcao
		return idade;
	}
	
	// Funcao confere CPF
	public String confereCPF() {
		// Define uma nova variavel
		String novoCPF = "";
		// Validacao do metodo
		boolean valida = false;
		
		// Enquanto nao validar, executa
		while (!valida) {
			// Entrada do Usuario
			cpf = JOptionPane.showInputDialog(null, "Entre com CPF:\nExemplo: 987.654.321-09");
			
			// CPF tem por padrao 14 registros, entao forca Usuario a informar
			// um formato de CPF
			if (cpf.length() != 14) {
				// Caso contrario, mensagem
				JOptionPane.showMessageDialog(null, "CPF deve conter 14 digitos");
			} else {
				// Recebe valores e trata para remover caracteres e valida
				novoCPF = cpf.replace(".", "").replace("-", "");
				valida = true;
			}
		}
		// Retorna variavel da funcao
		return novoCPF;
	}
	
	// Valida valor de Salario
	public double validaSalario() {
		// Define condicao de validacao
		boolean valida = false;
		
		// Enquanto nao corresponder, executa
		while (!valida) {
			try {
				// Valor de entrada do Usuario. Por se tratar de Double,
				// um valor diferente de numeros ira gerar um erro
				salario = Double.parseDouble(JOptionPane.showInputDialog(null, "Salario R$:\nEx: 9.99"));
				
				// Confere valor negativo
				if (salario < 0) {
					JOptionPane.showMessageDialog(null, "Salario nao pode ser negativo");
				} else {
					// Senao valida
					valida = true;
				}
			} catch (Exception ex) {
				// Trata erro e exibe mensagem para usuario e desenvolvedor
				System.out.println(ex.getMessage());
				JOptionPane.showMessageDialog(null, "Informe um numero de Salario");
			}
		}
		// Retorna variavel
		return salario;
	}
	
	public char validaSexo() {
		// Condicao de validacao
		boolean valida = false;
		
		// Enquanto condicao nao corresponder
		while (!valida) {
			try {
				// Captura char de entrada de Usuario
				sexo = JOptionPane.showInputDialog(null, "Sexo:\n[M] Masculino\n[F] Feminino")
					.toLowerCase().charAt(0);
				// Caso entrada de char 'M-m' ou 'F-f', será validado
				if (sexo == 'm' || sexo == 'f') {
					valida = true;
				} else {
					JOptionPane.showMessageDialog(null, "Ups... esse tipo de Sexo nao existe");
				}
			} catch (Exception ex) {
				// Exibe mensagem para usuario e erro para Desenvolvedor
				System.out.println(ex.getMessage());
				JOptionPane.showMessageDialog(null, "Ups... Sexo nao correponde");
			}
		}
		// Retorna variavel
		return sexo;
	}
	
	public String validaFuncao() {
		// Condicao de validacao
		boolean valida = false;
		String tipoFuncao = "";
		
		while (!valida) {
			try {
				funcao = Integer.parseInt(JOptionPane.showInputDialog(null, 
					"Escolha uma Funcao\n\n"
					+ "SUPERVISOR DE CARGA"
					+ "RECEPTOR DE ENCOMENDA"
					+ "TECNICO DE EQUIPAMENTO"
					+ "MOTORISTA"
					+ "ENGENHEIRO LOGISTICO"
					+ "EXECUTOR DE VENDA"
					+ "ANALISTA DE ESTOQUE"
					+ "SUPERVISOR DE CARGA"
					+ "ENGENHEIRO TECNICO"
					+ "MOTORISTA"+"RECEPTOR"
					+"ANALISTA DE VENDA"));
			} catch (Exception ex) {
				System.out.println(ex.getMessage());
				JOptionPane.showMessageDialog(null, "Opcao incorreta");
			}
		}
		
		return tipoFuncao;
	}
}
